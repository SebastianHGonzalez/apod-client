{"version":3,"sources":["Components/Common/Spinner.tsx","Components/APODClient.tsx","Components/APODArticle/Article/Title.tsx","Components/APODArticle/Article/ImageContainer.tsx","Components/APODArticle/Article/Body.tsx","Components/APODArticle/APODArticle.tsx","Components/APODArticle/index.ts","Clients/APODApiClient.ts","Config/index.ts","Config/APODApiClient.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Spinner","react_default","a","createElement","className","APODClient","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","article","fetchArticle","_this2","apodApiClient","then","setArticle","setState","id","Components_APODArticle","Common_Spinner","React","Component","Title","_ref","objectWithoutProperties","assign","concat","ImageContainer","href","children","Body","APODArticle","_ref$article","title","explanation","url","hdurl","Article_Title","Article_ImageContainer","src","Article_Body","APODApiClient","baseURL","apiKey","axios","create","params","api_key","get","endpoint","response","data","Config","process","APOD_API_KEY","APOD_BASE_URL","App","config","APODClient_APODClient","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bdb5e6f9.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Spinner() {\n    return <div className=\"spinner\" />\n}\n\nexport default Spinner;\n","import React from 'react';\n\nimport { APODArticle } from '.';\nimport { Spinner } from './Common';\nimport IArticle from '../Models/IArticle';\nimport IAPODApiClient from '../Clients/IAPODApiClient';\n\n\ninterface IAPODClientProps extends React.Props<any> {\n    apodApiClient: IAPODApiClient;\n}\n\ninterface IAPODClientState {\n    article: IArticle | null;\n}\n\nexport default class APODClient extends React.Component<IAPODClientProps, IAPODClientState> {\n\n    constructor(props: IAPODClientProps) {\n        super(props);\n\n        this.state = {\n            article: null\n        }\n\n        this.fetchArticle();\n    }\n\n    private fetchArticle() {\n        const api = this.props.apodApiClient;\n\n        api.fetchArticle().then((article: IArticle) => {\n            this.setArticle(article);\n        });\n    }\n\n    private setArticle(article: IArticle) {\n        this.setState({ article });\n    }\n\n    public render() {\n        const article = this.state.article;\n\n        return (\n            <div id=\"APODClient\">\n                {article ? <APODArticle article={article} /> : <Spinner />}\n            </div>\n        );\n    }\n}\n","import React from 'react';\n\nimport './Title.css';\n\ninterface ITitleProps extends React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement> {\n\n}\n\nfunction Title({ className, ...props }: ITitleProps) {\n    const ownClassName = \"article-title\";\n    return (\n        <h1 \n        className={className ? `${ownClassName} ${className}` : ownClassName} \n        {...props} \n        />\n    );\n}\n\nexport default Title;\n","import React from 'react';\n\nimport './ImageContainer.css';\n\n\ninterface IImageContainerProps extends React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement> {\n    href: string;\n}\n\nfunction ImageContainer({ className, href, children, ...props }: IImageContainerProps) {\n    const ownClassName = \"image-container\";\n    return (\n        <div\n            className={className ? `${ownClassName} ${className}` : ownClassName}\n            {...props}\n        >\n            <a href={href}>\n                {children}\n            </a>\n        </div>\n    );\n}\n\nexport default ImageContainer;\n","import React from 'react';\n\nimport './Body.css';\n\n\ninterface IBodyProps extends React.DetailedHTMLProps<React.HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement> {\n\n}\n\nfunction Body({ className, ...props }: IBodyProps) {\n    const ownClassName = \"article-body\";\n    return (\n        <p \n        className={className ? `${ownClassName} ${className}` : ownClassName} \n        {...props} \n        />\n    );\n}\n\nexport default Body;\n","import React from 'react';\n\nimport { Title, Body, ImageContainer } from './Article';\nimport IArticle from '../../Models/IArticle';\n\nimport './APODArticle.css';\n\n\ninterface IAPODArticleProps extends React.Props<any> {\n    article: IArticle;\n}\n\nfunction APODArticle({ article: {\n    title,\n    explanation,\n    url,\n    hdurl\n} }: IAPODArticleProps) {\n    return (\n        <div className=\"article\">\n            <Title>\n                {title}\n            </Title>\n            <ImageContainer href={hdurl}>\n                <img src={url} />\n            </ImageContainer>\n            <Body>\n                {explanation}\n            </Body>\n        </div>\n    );\n}\n\nexport default APODArticle;\n","import APODArticle from \"./APODArticle\";\n\nexport default APODArticle;\n","import axios, { AxiosInstance, AxiosRequestConfig } from 'axios';\n\nimport IAPODApiClient from './IAPODApiClient';\n\n\ninterface IAPODApiClientOptions {\n    baseURL: string;\n    apiKey: string;\n}\n\nclass APODApiClient implements IAPODApiClient {\n\n    public axios: AxiosInstance;\n\n    constructor({ baseURL, apiKey }: IAPODApiClientOptions) {\n        this.axios = axios.create({\n            baseURL,\n            params: {\n                api_key: apiKey\n            }\n        });\n    }\n\n    get endpoint() {\n        return '/planetary/apod';\n    }\n\n    fetchArticle() {\n        return this.axios.get(this.endpoint).then((response) => response.data);\n    }\n}\n\nexport default APODApiClient;\n","import apodApiClient from './APODApiClient';\n\nexport default {\n    apodApiClient\n};\n","export default {\n    apiKey: process.env.APOD_API_KEY || 'DEMO_KEY',\n    baseURL: process.env.APOD_BASE_URL || 'https://api.nasa.gov',\n};","import React, { Component } from 'react';\n\nimport { APODClient } from './Components';\nimport { APODApiClient } from './Clients';\n\nimport config from './Config';\n\n\nfunction App() {\n  const apodApiClient = new APODApiClient(config.apodApiClient);\n\n  return (\n    <div className=\"App\">\n      <APODClient apodApiClient={apodApiClient} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}